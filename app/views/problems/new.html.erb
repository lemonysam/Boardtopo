<h1><%=@board.name%></h1>
<div class="row">
  <div class="col-sm-12">
    <div id="boardApp" />
  </div>
</div>
<script type="text/babel">
let boardImage = document.getElementById('boardApp').getElementsByTagName("img")[0];
const board_id = <%= @board.id %>;
const boardHolds = (<%=raw @board.holds.to_json %>).map((hold) => {return { id: hold.id, position:{x: hold.x, y: hold.y}, highlight: false}});
class Marker extends React.Component{
  constructor (props) {
    super(props);
    this.state = {highlight:this.props.highlight};

  }

  render() {
    const markerPosition = {position: 'absolute', left: this.props.x * 100 + '%', top: this.props.y * 100+ '%'};
    const strokeColour = this.props.highlight ? 'red' : 'grey';
    return (
      <svg width="3%" height="3%" style={markerPosition} xmlns="http://www.w3.org/2000/svg" onClick={this.props.onClick}>
        <circle cx="50%" cy="50%" r="45%" stroke={strokeColour} stroke-width="5" fill="none" fill-opacity="0.25"  />
      </svg>
    )
  }
};
class Menu extends React.Component{
  constructor (props) {
    super(props);
  }
  render(){
    return(
      <div clas="form">
        <div className="form-group">
          <label for="name">Name Your Problem</label>
          <input name="name" type="text" placeholder="Problem name..." className="form-control" onChange={this.props.onChange} />
        </div>
        <div className="form-group">
          <button className="btn btn-primary" onClick={this.props.onSubmit}>Save Problem</button>
        </div>
      </div>
    )
  }
}
class Board extends React.Component{
  constructor (props) {
    super(props);
    this.state = { holds: boardHolds };
    this.highlightHold = this.highlightHold.bind(this);
    this.saveProblem = this.saveProblem.bind(this);
    this.updateName = this.updateName.bind(this);

  }
  highlightHold(e, id){
    let index = getIndex(id, this.state.holds, "id");

    if(typeof index === 'undefined')
    {
      return;
    }
    else
    {
      let holds = this.state.holds.slice();

      holds[index].highlight = !holds[index].highlight;

      this.setState({holds: holds});

    }

  }
  updateName(e){
    this.setState({name: e.target.value});
  }

  saveProblem(){
    const holds = this.state.holds.slice()
                  .filter((a) => {return a.highlight});
    const problem = {
      board_id: board_id,
      name: this.state.name
    };
    fetch('/boards/' + board_id + '/problems/', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({problem: problem, holds: holds})
    }).then((response)=>{
      return response.json()
    });
  }

  render(){
    const holds = this.state.holds.slice();
    const holdMarkers = holds.map((marker, i)=> {
      return (<Marker key={marker.id} x={marker.position.x} y={marker.position.y} highlight={marker.highlight} onClick={(e) => this.highlightHold(e, marker.id)}/>)
    });
    return(
        <div className="row">
          <div className="col-sm-9">
            <div style={{position: 'relative'}}>
              <img src="http://127.0.0.1:8887/images/Newcastle.jpg"  width="100%"/>
              {holdMarkers}
            </div>
          </div>
          <div className="col-sm-3">
            <Menu onChange={this.updateName} onSubmit={this.saveProblem}/>
          </div>
        </div>

    );
  }

}

ReactDOM.render(
  <Board />,
  document.getElementById('boardApp')
);

function getIndex(value, arr, prop) {
    for(var i = 0; i < arr.length; i++) {
        if(arr[i][prop] === value) {
            return i;
        }
    }
    return -1; //to handle the case where the value doesn't exist
}
</script>
